package lscript.collections

class Vector extends Collection

	global dynamic varying objectarray data
	global dynamic varying uint size

	# Create blank vector
	function dynamic interp void <init>()
		seto this.data object dword[10]
		setd this.size dword[0]
		ret

	# Copy constructor
	function dynamic interp void <init>(object Vector other)
		uint index
		seto this.data object other.length
		setv this.size other.size
		static_call System.arraycopy(LObject;iLObject;ii) this.data this.length other.data dword[0] this.length
		ret

	# Returns the number of elements in the vector
	function dynamic interp uint size()
		retv this.size

	function dynamic interp object at(uint index)
		if index >= this.size
			reto null
		end
		retv this.data[index]

	function dynamic interp bool set(uint index, object Object value)
		if index >= this.size
			retb false
		end
		setv this.data[index] value
		retb true

	function dynamic interp bool add(object Object elem)
		if this.size == data.size
			dynamic_call this.grow()
		end
		setv this.data[this.size] elem
		add this.size uint[1] this.size
		retb byte[1]

	function dynamic interp bool remove(object Object elem)
		uint index
		dynamic_call this.indexOf(LObject;) elem
		setr index
		if index == uint[-1]
			retb byte[0]
		end
		sub this.size this.size uint[1]

		if this.size == uint[0]
		elif index != this.size
			seto newarr object this.size

			uint i
			sub i index uint[1]


			while i < this.size
				
				add i i uint[1]
			end
		end
		retb byte[1]

	# Find the first index of a element
	#
	# Parameters:
	# elem - The element to find
	#
	# Returns: the first index of elem, or -1 if not found.
	function dynamic interp uint indexOf(object Object elem)
		uint index
		setd index dword[0]
		while index < size

			# test equality
			if this.data[index] == ulong[0]
				if elem == ulong[0]
					retv index
				end
			else
				dynamic_call this.data[index].equals(LObject;) elem
				if ret
					retv index
				end
			end
			add index index uint[1]
		end
		retv dword[-1]

	function dynamic interp objectarray toArray()
		objectarray Object arr
		seto arr object this.size
		static_call System.arraycopy(LObject;iLObject;ii) arr this.size this.data dword[0] this.size
		retv arr

	function dynamic interp object iterator()
		object VectorIterator iterator
		seto iterator new VectorIterator <init>(LVector;i) this dword[1] 
		retv iterator

	function dynamic interp object riterator()
		object VectorIterator riterator
		seto riterator new VectorIterator <init>(LVector;i) this dword[-1]
		retv riterator

	# grows the vector to have more elements
	function dynamic interp void grow()
		objectarray Object newArr
		uint newSize

		setv newSize this.data.length
		add newSize uint[10] newSize
		
		seto newArr object newSize
		static_call System.arraycopy(LObject;iLObject;ii) newArr this.size this.data dword[0] this.size

		setv this.data newArr
		ret
