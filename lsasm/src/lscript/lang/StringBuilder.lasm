package lscript.lang

class StringBuilder

	global static const chararray intMap null

	function static interp void <staticinit>()
		seto intMap char dword[10]
		setb intMap[0] '0'
		setb intMap[1] '1'
		setb intMap[2] '2'
		setb intMap[3] '3'
		setb intMap[4] '4'
		setb intMap[5] '5'
		setb intMap[6] '6'
		setb intMap[7] '7'
		setb intMap[8] '8'
		setb intMap[9] '9'
		ret

	global dynamic varying chararray chars
	global dynamic varying uint stringLength

	constructor()
		seto this.chars char dword[32]
		setd this.stringLength dword[0]
		ret

	function dynamic interp void append(object String string)
		uint tmp
		add tmp this.stringLength string.chars.length
		if tmp >= this.chars.length
			dynamic_call this.grow(i) string.chars.length
		end
		static_call System.arraycopy(LObject;iLObject;ii) this.chars this.stringLength string.chars dword[0] string.chars.length
		add this.stringLength this.stringLength string.chars.length
		ret

	function dynamic interp void append(char c)
		if this.stringLength == this.chars.length
			dynamic_call this.grow(i) dword[1]
		end
		setv this.chars[this.stringLength] c
		add this.stringLength this.stringLength uint[1]
		ret

	function dynamic interp void append(long num)
		if num < long[0]
			dynamic_call this.append(C) '-'
			neg num num
		end
		dynamic_call this.append(q) num
		ret

	function dynamic interp void append(ulong num)
		uchararray digits
		ulong digit
		int i
		int j

		if num == ulong[0]
			dynamic_call this.append(C) '0'
		else
			setd i dword[0]

			# length 20 for the max number of base-10 digits in 64-bit integer
			seto digits uchar dword[20]

			while num > ulong[0]
				mod digit num ulong[10]
				setv digits[i] digit
				add i i int[1]
				div num num ulong[10]
			end

			sub i i int[1]
			setv j i
			while j > int[-1]
				setv digit digits[j]
				dynamic_call this.append(C) intMap[digit]
				sub j j int[1]
			end
		end

		ret

	function dynamic interp void grow(uint required)
		chararray newarr
		uint newlen
		mul newlen this.stringLength uint[2]
		seto newarr char newlen
		static_call System.arraycopy(LObject;iLObject;ii) newarr dword[0] this.chars dword[0] this.stringLength
		setv this.chars newarr
		if newlen < required
			dynamic_call this.grow(i) required
		end
		ret

	function dynamic interp object toString()
		object String result
		chararray resultarr
		seto resultarr char this.stringLength
		static_call System.arraycopy(LObject;iLObject;ii) resultarr dword[0] this.chars dword[0] this.stringLength
		seto result new String([C) resultarr
		retv result

