#if !defined(LB_H)
#define LB_H

enum
{
	lb_noop = 0x00,
	lb_null = 0x00,

	lb_class = 0x01,
	lb_extends,

	lb_function = 0x10,
	lb_static,
	lb_dynamic,
	lb_interp,
	lb_native,
	lb_global,
	lb_const,
	lb_varying,

	lb_push = 0x20,
	lb_pop,

	lb_void = 0x40,
	lb_char,
	lb_uchar,
	lb_short,
	lb_ushort,
	lb_int,
	lb_uint,
	lb_long,
	lb_ulong,
	lb_bool,
	lb_float,
	lb_double,
	lb_object,
	lb_chararray,
	lb_uchararray,
	lb_shortarray,
	lb_ushortarray,
	lb_intarray,
	lb_uintarray,
	lb_longarray,
	lb_ulongarray,
	lb_boolarray,
	lb_floatarray,
	lb_doublearray,
	lb_objectarray,

	lb_setb = 0x60,
	lb_setw,
	lb_setd,
	lb_setq,
	lb_setr4,
	lb_setr8,
	lb_seto,
	lb_setv,
	lb_setr,

	lb_ret = 0x69,
	lb_retb,
	lb_retw,
	lb_retd,
	lb_retq,
	lb_retr4,
	lb_retr8,
	lb_reto,
	lb_retv,
	lb_retr,

	lb_static_call = 0x73,
	lb_dynamic_call,
	lb_byte,
	lb_word,
	lb_dword,
	lb_qword,
	lb_real4,
	lb_real8,
	lb_value,
	lb_string,
	lb_new,

	lb_add = 0x7e,
	lb_sub,
	lb_mul,
	lb_div,
	lb_mod,
	lb_neg,
	lb_and,
	lb_or,
	lb_xor,
	lb_lsh,
	lb_rsh,
	lb_not,

	lb_if = 0x90,
	lb_elif,
	lb_else,
	lb_while,
	lb_end,

	lb_equal = 0xa0,
	lb_nequal,
	lb_less,
	lb_lequal,
	lb_greater,
	lb_gequal,
	lb_one,
	lb_two,

	lb_castc = 0xb0,
	lb_castuc,
	lb_casts,
	lb_castus,
	lb_casti,
	lb_castui,
	lb_castl,
	lb_castul,
	lb_castb,
	lb_castf,
	lb_castd,

	lb_align = 0xfe,
	lb_debug = 0xff
};

#endif

